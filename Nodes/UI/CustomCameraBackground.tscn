[gd_scene load_steps=11 format=2]

[ext_resource path="res://Resources/Imgs/backgrounds/sky-2.png" type="Texture" id=1]
[ext_resource path="res://Resources/Imgs/backgrounds/sky1.png" type="Texture" id=2]
[ext_resource path="res://Resources/Imgs/backgrounds/blue-sky-with-white-clouds-texture.jpg" type="Texture" id=3]
[ext_resource path="res://Nodes/UI/CustomCameraBackground.gd" type="Script" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec3 color = vec3(0.35, 0.48, 0.95);
uniform int OCTAVES = 1;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(56, 78)) * 1000.0) * 1000.0);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.8;
	}
	return value;
}

void fragment() {
	vec2 coord = UV * 20.0;

	vec2 motion = vec2( fbm(coord + TIME * 0.4) );

	float final = fbm(coord + motion);

	COLOR = vec4(color, final);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/color = Vector3( -0.14, 0.18, 0.83 )
shader_param/OCTAVES = 1

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;
render_mode blend_add;


uniform vec2 direction = vec2(1.0,0.0);
uniform float speed_scale = -0.05;

void fragment(){

     vec2 move = direction * TIME * speed_scale;

     COLOR = texture(TEXTURE, UV + move);   
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/direction = Vector2( 1, 0 )
shader_param/speed_scale = -0.008

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;
render_mode blend_add;


uniform vec2 direction = vec2(1.0,0.0);
uniform float speed_scale = 0.05;

void fragment(){

     vec2 move = direction * TIME * speed_scale;

     COLOR = texture(TEXTURE, UV + move);   
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/direction = Vector2( 1, 0 )
shader_param/speed_scale = 0.01

[node name="CustomCamera" type="Camera2D"]
visible = false
current = true
limit_left = -100000
limit_top = -100000
limit_right = 100000
limit_bottom = 100000
editor_draw_limits = true
editor_draw_drag_margin = true
script = ExtResource( 4 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
layer = -1
scroll_ignore_camera_zoom = true

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
visible = false
z_as_relative = false
motion_scale = Vector2( 0.05, 0.05 )

[node name="Background2" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
material = SubResource( 2 )
scale = Vector2( 0.444444, 0.395062 )
texture = ExtResource( 3 )

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]
visible = false
z_as_relative = false
motion_scale = Vector2( 0.15, 0.15 )

[node name="Background7" type="Sprite" parent="ParallaxBackground/ParallaxLayer3"]
modulate = Color( 1, 1, 1, 0.180392 )
material = SubResource( 4 )
position = Vector2( 0, -14 )
scale = Vector2( 1.30506, 1.29855 )
texture = ExtResource( 1 )

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
visible = false
z_as_relative = false
motion_scale = Vector2( 0.1, 0.1 )

[node name="Background7" type="Sprite" parent="ParallaxBackground/ParallaxLayer2"]
show_behind_parent = true
material = SubResource( 6 )
position = Vector2( -928, -512 )
scale = Vector2( 0.90625, 0.893333 )
texture = ExtResource( 2 )
centered = false
flip_h = true
region_enabled = true
region_rect = Rect2( 0, 0, 2048, 1200 )
